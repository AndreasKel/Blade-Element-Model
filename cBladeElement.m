%Author: AndreasKel
%---------------------------------------------------------
%license:          MIT
%file name:        cBladeElement.m
%environment:      Matlab/Simulink
%functionality:    Class to initialise a propeller object. 
%=========================================================

classdef cBladeElement<handle
    
    properties(Access = private)
        chord;           %cord length is kept constant
        R;               %radius of the propeller
        rstep;
        rx;              %radial positions
        B;               %number of Blades
        pitch            %distance travelled by the propeller in one revolution
        rho = 1.1225;    %air density
        TotalThrust;     %thrust generated by the propeller
        TotalTorque;     %torque generated by the propeller
        TotalPower;      %power generated by the propeller
        CoThrust;        %coefficient of Thrust of the propeller
        CoTorque;        %coefficient of Torque of the propeller
        CoPower;         %coefficient of Power of the propeller
        Efficiency;      %efficiency of the propeller
    end
    
    properties(Access = public)
        maxTryNo = 500;        %total number of attempts to estimate aa and at      
        %initial guess
        axialFactor = 0.1;     %axial induction factor
        angularFactor = 0.01;  %angular induction factor
    end
    
    methods
        
        function obj = cBladeElement(diameter, pitchDistance, numberOfBlades)
            %CBLADEELEMENT Construct an instance of this class
            obj.chord = 0.015;
            obj.R = diameter/2;
            obj.rstep = (obj.R - 0.1*obj.R)/10;
            obj.rx = [0.1*obj.R:obj.rstep:obj.R]; %radial positions
            obj.B = numberOfBlades;
            obj.pitch = pitchDistance;
        end
        
        function BladeAnalysis(obj, freeStreamSpeed, angularSpeed)
            %estimate the aa and at and then calculate thrust and torque generated by the propeller        
            tryNo = 0;
            obj.TotalThrust = 0;
            obj.TotalTorque = 0;
            obj.TotalPower =  0;
            aa = obj.axialFactor;
            at = obj.angularFactor;
            for index=1:size(obj.rx,2)
                r = obj.rx(index);                                                                                                              %radial position
                theta  = obj.pitch/(2*pi*r);                                                                                                    %pitch angle
                stop = 0;
                while (stop == 0)
                    Vaxial = freeStreamSpeed * (1 + aa);                                                                                        %Velocity of incoming air, normal to the propeller
                    Vtang = angularSpeed * r * (1 - at);                                                                                        %Tangential velocity at the propeller
                    phi = atan(Vaxial/Vtang);                                                                                                   %Advance Angle
                    AoA = theta - phi;                                                                                                          %Angle of Attack
                    f = obj.B*(obj.R - r)/(2*r*sin(phi));
                    F = 2*acos(exp(-f))/pi;                                                                                                     %loss factor at blade tip
                    CoLift = 6.2 * AoA;                                                                                                         %coefficient of Lift
                    CoDrag = 0.008-0.003*CoLift+0.01*CoLift*CoLift;                                                                             %coefficient of Drag
                    Vres = sqrt(Vaxial*Vaxial + Vtang*Vtang);                                                                                   %resultant velocity
                    dT = 0.5*obj.rho*Vres*Vres*obj.B*obj.chord*(CoLift*cos(phi)-CoDrag*sin(phi));                                               %dT/dr - thrust generated for a propeller radius r
                    dQ = 0.5*obj.rho*Vres*Vres*obj.B*obj.chord*r*(CoDrag*cos(phi)+CoLift*sin(phi));                                             %dQ/dr - torque generated for a propeller radius r
                    
                    %dT = 0.5*B*ρU^2 (Clcos(phi)-Cdsin(phi))c dr  (1)
                    %dQ = 0.5*B*ρU^2 (Clsin(phi)+Cdcos(phi))cr dr (2)
                    %dT = 4FπrρV^2(1+aa)aa dr                     (3)
                    %dQ = 4FπρVΩr^3(1+aa)at dr                    (4)
                    %equating (1) with (3) and (2) with (4)
                    aa1_dash = (-1 + sqrt(1 - 4*1*-dT/(F*4*pi*r*obj.rho*freeStreamSpeed^2)))/2;                                                 %quatratic formula to find aa
                    aa2_dash = (-1 - sqrt(1 - 4*1*-dT/(F*4*pi*r*obj.rho*freeStreamSpeed^2)))/2;                                                 %quatratic formula to find aa
                    at_dash = dQ/(4.0*pi*r*r*r*obj.rho*vehicleSpeed*(1+aa)*angularSpeed);

                    Vaxial_dash = freeStreamSpeed * (1 + aa1_dash);                                                                             %Velocity of incoming air, normal to the propeller
                    Vtang_dash = angularSpeed * r * (1 - at_dash);                                                                              %Tangential velocity at the propeller
                    phi_dash = atan(Vaxial_dash/Vtang_dash);                                                                                    %Advance Angle
                    AoA_dash = theta - phi_dash;                                                                                                %Angle of Attack
                    CoLift_dash = 6.2 * AoA_dash;
                    CoDrag_dash = 0.008-0.003*CoLift_dash+0.01*CoLift_dash*CoLift_dash;
                    Vres_dash = sqrt(Vaxial_dash*Vaxial_dash + Vtang_dash*Vtang_dash); %resultant velocity
                    dT_dash = 0.5*obj.rho*Vres_dash*Vres_dash*obj.B*obj.chord*(CoLift_dash*cos(phi_dash)-CoDrag_dash*sin(phi_dash));            %dT/dr - thrust generated for a propeller radius r
                    dQ_dash = 0.5*obj.rho*Vres_dash*Vres_dash*obj.B*obj.chord*r*(CoDrag_dash*cos(phi_dash)+CoLift_dash*sin(phi_dash));          %dQ/dr - torque generated for a propeller radius r

                    %Crank–Nicolson method - convergence enhancing technique
                    if (abs(dT_dash - dT - 0.5*((F*obj.rho*4*pi*r*(freeStreamSpeed^2)*(1+aa)*aa) + (F*obj.rho*4*pi*r*(freeStreamSpeed^2)*(1+aa_dash)*aa_dash))) < 0.0001) && (abs(dQ_dash - dQ - 0.5*((F*obj.rho*4*pi*r*r*r*freeStreamSpeed*(1+aa)*at*angularSpeed) + (F*obj.rho*4*pi*r*r*r* freeStreamSpeed*(1+aa_dash)*at_dash*angularSpeed))) < 0.0001)
                       stop = 1;
                    else
                        aa = aa_dash;
                        at = at_dash;
                        %convergence for this nonlinear system of equations is not guaranteed
                        tryNo = tryNo + 1;
                        if tryNo > obj.maxTryNo
                            stop = 1;
                        end
                    end         
                end
                obj.TotalThrust  = obj.TotalThrust + dT*obj.rstep;
                obj.TotalTorque  = obj.TotalTorque + dQ*obj.rstep;
            end
            obj.CoThrust = obj.TotalThrust/(obj.rho*angularSpeed*angularSpeed*(2*obj.R)^4);
            obj.CoTorque = obj.TotalTorque/(obj.rho*angularSpeed*angularSpeed*(2*obj.R)^5);
            J = freeStreamSpeed / (angularSpeed*(obj.R*2));
            obj.Efficiency = J * obj.CoThrust / (2*pi*obj.CoTorque);
            obj.CoPower = J*obj.CoThrust/obj.Efficiency;
            obj.TotalPower = obj.CoPower*obj.rho*angularSpeed*angularSpeed*angularSpeed*(2*obj.R)^5;
        end
        
        
        function BladeAnalysis2(obj, freeStreamSpeed, angularSpeed)
            %different method to estimate aa and at        
            tryNo = 0;
            obj.TotalThrust = 0;
            obj.TotalTorque = 0;
            obj.TotalPower =  0;
            aa = obj.axialFactor;
            at = obj.angularFactor;
            for index=1:size(obj.rx,2)
                r = obj.rx(index);                                                                                                              %radial position
                theta  = obj.pitch/(2*pi*r);                                                                                                    %pitch angle
                sigma = obj.B*obj.chord/(pi*r);
                stop = 0;
                while (stop == 0)
                    Vaxial = freeStreamSpeed * (1 + aa);                                                                                        %Velocity of incoming air, normal to the propeller
                    Vtang = angularSpeed * r * (1 - at);                                                                                        %Tangential velocity at the propeller
                    phi = atan(Vaxial/Vtang);                                                                                                   %Advance Angle
                    AoA = theta - phi;                                                                                                          %Angle of Attack
                    f = obj.B*(obj.R - r)/(2*r*sin(phi));
                    F = 2*acos(exp(-f))/pi;                                                                                                     %loss factor at blade tip
                    CoLift = 6.2 * AoA;                                                                                                         %coefficient of Lift
                    CoDrag = 0.008-0.003*CoLift+0.01*CoLift*CoLift;                                                                             %coefficient of Drag
                    
                    Cx = CoLift*cos(phi) - CoDrag*sin(phi);
                    Cz = CoLift*sin(phi) + CoDrag*cos(phi);
                    %dT = 0.5*B*ρU^2 (Clcos(phi)-Cdsin(phi))c dr  (1)
                    %dQ = 0.5*B*ρU^2 (Clsin(phi)+Cdcos(phi))cr dr (2)
                    %dT = 4FπrρV^2(1+aa)aa dr                     (3)
                    %dQ = 4FπρVΩr^3(1+aa)at dr                    (4)
                    %equating (1) with (3) and (2) with (4)
                    aa_dash = sigma * Cx/(8*F*sin(phi)*sin(phi) - sigma*Cx);
                    at_dash = sigma * Cz/(8*F*sin(phi)*cos(phi) + sigma*Cz);                                                                       

                    if (abs(aa_dash - aa) < 0.0001 && abs(at_dash - at) < 0.0001)
                       stop = 1;
                    else
                        aa = aa_dash;
                        at = at_dash;
                        %convergence for this nonlinear system of equations is not guaranteed
                        tryNo = tryNo + 1;
                        if tryNo > obj.maxTryNo
                            stop = 1;
                        end
                    end         
                end
                obj.TotalThrust  = obj.TotalThrust + dT*obj.rstep;
                obj.TotalTorque  = obj.TotalTorque + dQ*obj.rstep;
            end
            obj.CoThrust = obj.TotalThrust/(obj.rho*angularSpeed*angularSpeed*(2*obj.R)^4);
            obj.CoTorque = obj.TotalTorque/(obj.rho*angularSpeed*angularSpeed*(2*obj.R)^5);
            J = freeStreamSpeed / (angularSpeed*(obj.R*2));
            obj.Efficiency = J * obj.CoThrust / (2*pi*obj.CoTorque);
            obj.CoPower = J*obj.CoThrust/obj.Efficiency;
            obj.TotalPower = obj.CoPower*obj.rho*angularSpeed*angularSpeed*angularSpeed*(2*obj.R)^5;
        end 
        
        function outputArg = printThrust(obj)
            %prints and outputs the thrust generated by the propeller
            outputArg = obj.TotalThrust;
            disp(obj.TotalThrust); 
        end
        
        function outputArg = printTorque(obj)
            %prints and outputs the torque generated by the propeller
            outputArg = obj.TotalTorque;
            disp(obj.TotalTorque); 
        end
        
        function outputArg = printPower(obj)
            %prints and outputs the power generated by the propeller
            outputArg = obj.TotalPower;
            disp(obj.TotalPower); 
        end
        
        function outputArg = printCoThrust(obj)
            %prints and outputs the coefficient of Thrust of the propeller
            outputArg = obj.CoThrust;
            disp(obj.CoThrust); 
        end
        
        function outputArg = printCoTorque(obj)
            %prints and outputs the coefficient of Torque of the propeller
            outputArg = obj.CoTorque;
            disp(obj.CoTorque); 
        end
        
        function outputArg = printCoPower(obj)
            %prints and outputs the coefficient of Power of the propeller
            outputArg = obj.CoPower;
            disp(obj.CoPower); 
        end
        
        function outputArg = printEfficiency(obj)
            %prints and outputs the efficiency of the propeller
            outputArg = obj.Efficiency;
            disp(obj.Efficiency); 
        end
    end
end

